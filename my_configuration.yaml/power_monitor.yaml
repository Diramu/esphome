substitutions:
# Change the disp_name to something you want  
  disp_name: PM
# Interval of how often the power is updated
  update_time: 10s
# frequency of local supply 50 or 60Hz
  frequency: 50Hz
#SCT-013-000 100A/50ma - 32498
  #gain_ct100A: '26077'
  #gain_ct100A: '32498'
  gain_ct100A: '28367'
# SCT-013-050 50A/1V - 15420
  gain_ct50A: '15420'
#SCT-013-030 30A/1V - 9210
  #gain_ct30A: '8650'
  gain_ct30A: '9399'
# Voltage using a 9VAC power transformer
# Note: If you can not get the voltage correct with the highest gain of 65535, uncomment the 2.0 multiply filter above and lower the gain as needed
  gain_v: '35917'
  mult_v: '4.0'
  gain_pga: '1X'

esphome:
  name: power_monitor
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  manual_ip:
    static_ip: 192.168.107.62
    gateway: 192.168.107.1
    subnet: 255.255.255.0


# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  password: !secret api_pass

ota:
  password: !secret api_pass

#mqtt:
#  id: mqtt_bk
#  broker: !secret mqtt_host
#  username: !secret mqtt_user
#  password: !secret mqtt_pass

web_server:
  port: 80

spi:
  clk_pin: 18
  miso_pin: 19
  mosi_pin: 23
    
#switch:
#  - platform: restart
#    name: ${disp_name} Restart  
time:
  - platform: sntp
    id: sntp_time    
    timezone: !secret timezone


sensor:
#  - platform: wifi_signal
#    name: ${disp_name} WiFi
#    update_interval: 60s

    # channels 1 to 3
  - platform: atm90e32
    id: atm1
    cs_pin: 5
    phase_a:
      voltage:
        name: ${disp_name} CT1 Volts
        id: ct1V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT1 Amps
#        id: ct1Amps
      power:
        name: ${disp_name} CT1 Pwr
        id: ct1Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct100A}
      power_factor:
        name: ${disp_name} CT1 Pf
        id: ct1Pf
    phase_b:
      voltage:
        name: ${disp_name} CT2 Volts
        id: ct2V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT2 Amps
#        id: ct2Amps
      power:
        name: ${disp_name} CT2 Pwr
        id: ct2Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct100A}
      power_factor:
        name: ${disp_name} CT2 Pf
        id: ct2Pf
    phase_c:
      voltage:
        name: ${disp_name} CT3 Volts
        id: ct3V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT3 Amps
#        id: ct3Amps
      power:
        name: ${disp_name} CT3 Pwr
        id: ct3Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT3 Pf
        id: ct3Pf
    frequency:
      name: ${disp_name} Freq A
    line_frequency: ${frequency}
    gain_pga: ${gain_pga}
    update_interval: ${update_time}

#     channels 4 to 6
  - platform: atm90e32
    id: atm2
    cs_pin: 4
    phase_a:
      voltage:
        name: ${disp_name} CT4 Volts
        id: ct4V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT4 Amps
#        id: ct4Amps
      power:
        name: ${disp_name} CT4 Pwr
        id: ct4Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT4 Pf
        id: ct4Pf
    phase_b:
      voltage:
        name: ${disp_name} CT5 Volts
        id: ct5V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT5 Amps
#        id: ct5Amps
      power:
        name: ${disp_name} CT5 Pwr
        id: ct5Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT5 Pf
        id: ct5Pf
    phase_c:
      voltage:
        name: ${disp_name} CT6 Volts
        id: ct6V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT6 Amps
#        id: ct6Amps
      power:
        name: ${disp_name} CT6 Pwr
        id: ct6Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT6 Pf
        id: ct6Pf
    frequency:
      name: ${disp_name} Freq B
    line_frequency: ${frequency}
    gain_pga: ${gain_pga}
    update_interval: ${update_time}    

    # extension board
    # channels 7 to 9
  - platform: atm90e32
    id: atm3
    cs_pin: 15
    phase_a:
      voltage:
        name: ${disp_name} CT7 Volts
        id: ct7V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
#      current:
#        name: ${disp_name} CT7 Amps
#        id: ct7Amps
      power:
        name: ${disp_name} CT7 Pwr
        id: ct7Pwr
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT7 Pf
        id: ct7Pf
    phase_b:
      voltage:
        name: ${disp_name} CT8 Volts
        id: ct8V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT8 Amps
#        id: ct8Amps
      power:
        name: ${disp_name} CT8 Pwr
        id: ct8Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT8 Pf
        id: ct8Pf
    phase_c:
      voltage:
        name: ${disp_name} CT9 Volts
        id: ct9V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT9 Amps
#        id: ct9Amps
      power:
        name: ${disp_name} CT9 Pwr
        id: ct9Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT9 Pf
        id: ct9Pf
    frequency:
      name: ${disp_name} Freq C
    line_frequency: ${frequency}
    gain_pga: ${gain_pga}
    update_interval: ${update_time}    
    # channels 10 to 12
  - platform: atm90e32
    id: atm4
    cs_pin: 16
    write:
      - addr: 0x02
        data: 0x0444
      - addr: 0x33
        data: 0x087
    phase_a:
      voltage:
        name: ${disp_name} CT10 Volts
        id: ct10V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
#      current:
#        name: ${disp_name} CT10 Amps
#        id: ct10Amps
      power:
        name: ${disp_name} CT10 Pwr
        id: ct10Pwr
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT10 Pf
        id: ct10Pf
    phase_b:
      voltage:
        name: ${disp_name} CT11 Volts
        id: ct11V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT11 Amps
#        id: ct11Amps
      power:
        name: ${disp_name} CT11 Pwr
        id: ct11Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT11 Pf
        id: ct11Pf
    phase_c:
      voltage:
        name: ${disp_name} CT12 Volts
        id: ct12V
        accuracy_decimals: 1
        filters:
          - multiply: ${mult_v}
      gain_voltage: ${gain_v}
#      current:
#        name: ${disp_name} CT12 Amps
#        id: ct12Amps
      power:
        name: ${disp_name} CT12 Pwr
        id: ct12Pwr
        filters:
          - multiply: ${mult_v}
      gain_ct: ${gain_ct30A}
      power_factor:
        name: ${disp_name} CT12 Pf
        id: ct12Pf
    frequency:
      name: ${disp_name} Freq C
    line_frequency: ${frequency}
    gain_pga: ${gain_pga}
    update_interval: ${update_time}    
### debug grab values from home assistant
##input_number:
##  do_read:
##    name: do_read
##    initial: 0
##    min: 0
##    max: 1
##    mode: box
##  reg_addr:
##    name: reg_addr
##    initial: 0
##    min: 0
##    max: 255
##    mode: box
##  do_write:
##    name: do_write
##    initial: 0
##    min: 0
##    max: 1
##    mode: box
##  atm_write:
##    name: atm_write
##    initial: 0
##    min: 0
##    max: 15
##    mode: box
##  reg_data:
##    name: reg_data
##    initial: 0
##    min: 0
##    max: 65535
##    step: 1
##    mode: box
   # register eddress for reading or writing
  - platform:  homeassistant
    name: Read Address
    entity_id: input_number.reg_addr
    id: rr_addr
   # data to write
  - platform:  homeassistant
    name: Write Data
    entity_id: input_number.reg_data
    id: wr_data
    # bit wise number to select atm90e32
  - platform:  homeassistant
    name: ATM Sel
    entity_id: input_number.atm_write
    id: wr_atm

    # flag to do read when set to 1
  - platform:  homeassistant
    name: Read
    entity_id: input_number.do_read
    id: rr_do
    on_value_range:
      above: 0.5
      then:
        # reset flag so only read once
      - homeassistant.service:
          service: input_number.set_value 
          data:
            entity_id: input_number.do_read
            value: '0'
            # call the read function for each atm90 and set a local sensor to the return vale
      - lambda: |-
          atm90e32::ATM90E32Component *comp[4] = {id(atm1),id(atm2),id(atm3),id(atm4)};
          template_::TemplateSensor *rr[4] = {id(atm1rr),id(atm2rr),id(atm3rr),id(atm4rr)}; ;
          int addr;
          int data;
          addr = id(rr_addr).state;
          ESP_LOGI("main", "rr_do The address is 0x%x (%d)", addr, addr);
          for( auto i = 0; i < 4; i++ ) {
             data = id(comp[i]).read16(addr);
             ESP_LOGI("main","atm%d 0x%04x %d",i+1, data, data);
             id(rr[i]).publish_state(data);
          }

    # flag to do write when set to 1
  - platform:  homeassistant
    name: write
    entity_id: input_number.do_write
    id: wr_do
    on_value_range:
      above: 0.5
      then:
        # reset flag so only read once
      - homeassistant.service:
          service: input_number.set_value 
          data:
            entity_id: input_number.do_write
            value: '0'
            # call the write function for each atm90 with a set bit in the wr_atm state
            # enable/disable configuration before/after the write
      - lambda: |-
          atm90e32::ATM90E32Component *comp[4] = {id(atm1),id(atm2),id(atm3),id(atm4)};
          int addr;
          int data;
          int atms;
          addr = id(rr_addr).state;
          data = id(wr_data).state;
          atms = id(wr_atm).state;
          ESP_LOGI("main", "wr_do data 0x%x to address is 0x%x (%d) of atms 0x%x", data, addr, addr, atms);
          for( auto i = 0; i < 4; i++ ) {
             if (atms & (1<<i)) {
               id(comp[i]).write16(0x7F,0x55AA);
               id(comp[i]).write16(addr,data);
               id(comp[i]).write16(0x7F,0);
               data = id(comp[i]).read16(addr);
               ESP_LOGI("main","atm%d 0x%04x",i+1,data);
             }
          }
  - platform:  template
    name: atm1 read reg
    id: atm1rr
  - platform:  template
    name: atm2 read reg
    id: atm2rr
  - platform:  template
    name: atm3 read reg
    id: atm3rr
  - platform:  template
    name: atm4 read reg
    id: atm4rr
